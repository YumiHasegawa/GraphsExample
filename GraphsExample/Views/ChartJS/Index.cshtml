@using Omu.Awem.Helpers
@using Omu.AwesomeMvc
@model GraphsExample.ViewModels.ChartJSViewModel

@{
    ViewData["Title"] = "ChartJS";
}

@using (Html.Awe().BeginContext())
{
    @Html.DisplayForModel()
    var grid = "ChartJS";
    var gridId = Html.Awe().GetContextPrefix() + grid;

    <div>
        @(Html.Awe().Grid(grid)
            .Url(Url.Action("GridGetItems", "ChartJS"))
            .RowClassClientFormat("infoBackground")
            .Mod(a => a.Loading(true, true, "no items"))
            .Columns(
                 new Column { Header = "Graph column", Width = 225, ClientFormatFunc = "getGraph" },
                 new Column { Header = "Any column" }
            )
            .ShowGroupBar(false)
            .Groupable(false)
            .Sortable(false)
            .Reorderable(false)
            .Resizable(true)
            .Paging(false)
            .Persistence(Persistence.None))
    </div>
    <div>
        <canvas id="myChart"></canvas>
    </div>
    <div id="hidden_container" style="visibility: hidden; width:none; height:none"></div>


    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js"></script>
    <script type="text/javascript">

        function getGraph(o) {
            var canvasDiv = document.getElementById("hidden_container");
            var canvasElem = document.createElement('canvas');
            canvasElem.id = o.id + '-Canvas';
            canvasElem.width = 100;
            canvasElem.height = 50;
            canvasDiv.appendChild(canvasElem);

            var image = new Image();
            image.id = o.id + '-Image';
            image.className = "graphCss";
            image.style = "opacity:0"; //to avoid ugly loading image border

            var chart = new Chart(
                canvasElem.getContext("2d"),
                {
                    type: 'line',
                    data: {
                        labels: o.values.map(a=>a.x),
                        datasets: [{
                            label: 'Data',
                            backgroundColor: 'rgb(255, 99, 132)',
                            borderColor: 'rgb(255, 99, 132)',
                            borderWidth: 10,
                            data: o.values,
                        }]
                    },
                    options: {
                        parsing: {
                            xAxisKey: 'x',
                            yAxisKey: 'y'
                        },
                        plugins: {
                            legend: {
                                display: false
                            }
                        },
                        animation: {
                            //maintainAspectRatio: false,
                            onComplete: function () {
                                var img = document.getElementById(o.id + '-Image');
                                img.src = chart.toBase64Image();
                                img.style = "opacity:1";
                            }
                        }
                    }
                });

            canvasDiv.removeChild(canvasElem);
            return image.outerHTML;
        };

        $(document).ready(function () {
            $('#@(gridId)').on('aweload', function (e, data) {
                var v = document.getElementById("myChart");

                var values = @(Html.Raw(ViewBag.TestValues));
                myChart = new Chart(
                    v.getContext("2d"),
                    {
                        type: 'line',
                        data: {
                            labels: values.map(a => a.x),
                            datasets: [{
                                label: 'Data',
                                backgroundColor: 'rgb(255, 99, 132)',
                                borderColor: 'rgb(255, 99, 132)',
                                borderWidth: 10,
                                data: values,
                            }]
                        },
                        options: {
                            parsing: {
                                xAxisKey: 'x',
                                yAxisKey: 'y'
                            },
                            plugins: {
                                legend: {
                                    display: true
                                }
                            }
                        }
                    });
            });
        });

    </script>

    <style>
        .awe-row .graphCss {
            width: 150px;
            height: 80px;
        }
    </style>
}